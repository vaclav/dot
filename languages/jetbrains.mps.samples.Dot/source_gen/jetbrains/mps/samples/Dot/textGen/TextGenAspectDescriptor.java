package jetbrains.mps.samples.Dot.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import java.util.HashMap;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_t8hmqt_a0c.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return new A_list_TextGen();
          }
          break;
        case 1:
          if (true) {
            return new Attr_list_TextGen();
          }
          break;
        case 2:
          if (true) {
            return new Attr_stmt_TextGen();
          }
          break;
        case 3:
          if (true) {
            return new EdgeRHS_TextGen();
          }
          break;
        case 4:
          if (true) {
            return new EdgeRHS_block_1_1_1_TextGen();
          }
          break;
        case 5:
          if (true) {
            return new EdgeRHS_block_1_1_2_TextGen();
          }
          break;
        case 6:
          if (true) {
            return new Edge_stmt_TextGen();
          }
          break;
        case 7:
          if (true) {
            return new Edge_stmt_block_1_1_1_TextGen();
          }
          break;
        case 8:
          if (true) {
            return new Edge_stmt_block_1_1_2_TextGen();
          }
          break;
        case 9:
          if (true) {
            return new Graph_TextGen();
          }
          break;
        case 10:
          if (true) {
            return new Node_id_TextGen();
          }
          break;
        case 11:
          if (true) {
            return new Node_stmt_TextGen();
          }
          break;
        case 12:
          if (true) {
            return new Port_1_TextGen();
          }
          break;
        case 13:
          if (true) {
            return new Port_2_TextGen();
          }
          break;
        case 14:
          if (true) {
            return new Stmt_1_TextGen();
          }
          break;
        case 15:
          if (true) {
            return new Stmt_2_TextGen();
          }
          break;
        case 16:
          if (true) {
            return new Stmt_3_TextGen();
          }
          break;
        case 17:
          if (true) {
            return new Stmt_4_TextGen();
          }
          break;
        case 18:
          if (true) {
            return new Stmt_5_TextGen();
          }
          break;
        case 19:
          if (true) {
            return new Stmt_list_TextGen();
          }
          break;
        case 20:
          if (true) {
            return new Stmt_list_block_1_1_TextGen();
          }
          break;
        case 21:
          if (true) {
            return new Subgraph_TextGen();
          }
          break;
        case 22:
          if (true) {
            return new Subgraph_block_1_1_TextGen();
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65acL, "jetbrains.mps.samples.Dot.structure.Graph"))) {
        String fname = getFileName_Graph(root);
        String ext = getFileExtension_Graph(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Graph(SNode node) {
    return "Graph";
  }
  private static String getFileExtension_Graph(SNode node) {
    return "gv";
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_t8hmqt_a0c = buildConceptIndices(MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d659dL, "jetbrains.mps.samples.Dot.structure.A_list"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d659eL, "jetbrains.mps.samples.Dot.structure.Attr_list"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a2L, "jetbrains.mps.samples.Dot.structure.Attr_stmt"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a3L, "jetbrains.mps.samples.Dot.structure.EdgeRHS"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a0L, "jetbrains.mps.samples.Dot.structure.EdgeRHS_block_1_1_1"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a1L, "jetbrains.mps.samples.Dot.structure.EdgeRHS_block_1_1_2"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a8L, "jetbrains.mps.samples.Dot.structure.Edge_stmt"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65aaL, "jetbrains.mps.samples.Dot.structure.Edge_stmt_block_1_1_1"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65abL, "jetbrains.mps.samples.Dot.structure.Edge_stmt_block_1_1_2"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65acL, "jetbrains.mps.samples.Dot.structure.Graph"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65b7L, "jetbrains.mps.samples.Dot.structure.Node_id"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a7L, "jetbrains.mps.samples.Dot.structure.Node_stmt"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65aeL, "jetbrains.mps.samples.Dot.structure.Port_1"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65afL, "jetbrains.mps.samples.Dot.structure.Port_2"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65b2L, "jetbrains.mps.samples.Dot.structure.Stmt_1"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65b3L, "jetbrains.mps.samples.Dot.structure.Stmt_2"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65b4L, "jetbrains.mps.samples.Dot.structure.Stmt_3"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65b5L, "jetbrains.mps.samples.Dot.structure.Stmt_4"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65b6L, "jetbrains.mps.samples.Dot.structure.Stmt_5"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a5L, "jetbrains.mps.samples.Dot.structure.Stmt_list"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a4L, "jetbrains.mps.samples.Dot.structure.Stmt_list_block_1_1"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65b0L, "jetbrains.mps.samples.Dot.structure.Subgraph"), MetaAdapterFactory.getConcept(0xfb046105bd7c48d7L, 0xbb7b88a9914e3cc3L, 0x3881fc82f19d65a6L, "jetbrains.mps.samples.Dot.structure.Subgraph_block_1_1"));
}
